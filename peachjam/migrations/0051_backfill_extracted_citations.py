# Generated by Django 3.2.17 on 2023-02-10 10:34


from cobalt.uri import FrbrUri
from django.db import migrations
from lxml import html


def update_extracted_citations(
    work_obj, work_model, extracted_citation_model, citation_link_model
):
    """Returns a set of work_frbr_uris,
    taken from CitationLink objects(for PDFs) and all <a href="/akn/..."> embedded HTML links."""
    for doc in work_obj.documents.all():

        work_frbr_uris = set()

        if doc.content_html:
            root = html.fromstring(doc.content_html)
            for a in root.xpath('//a[starts-with(@href, "/akn")]'):
                try:
                    work_frbr_uris.add(FrbrUri.parse(a.attrib["href"]).work_uri())
                except ValueError:
                    # ignore malformed FRBR URIs
                    pass
        else:
            for citation_link in citation_link_model.objects.filter(document_id=doc.pk):
                try:
                    work_frbr_uris.add(FrbrUri.parse(citation_link.url).work_uri())
                except ValueError:
                    # ignore malformed FRBR URIs
                    pass

        # A work does not cite itself
        if work_obj.frbr_uri in work_frbr_uris:
            work_frbr_uris.remove(work_obj.frbr_uri)

        # Update the current work's ExtractedCitations
        target_works = work_model.objects.filter(frbr_uri__in=work_frbr_uris)

        # delete existing extracted citations
        extracted_citation_model.objects.filter(citing_work=work_obj).delete()

        for target_work in target_works:
            extracted_citation_model.objects.get_or_create(
                citing_work=work_obj, target_work=target_work
            )


def backfill_extracted_citations(apps, schema_editor):
    Work = apps.get_model("peachjam", "Work")
    for work in Work.objects.all().iterator(chunk_size=100):
        ExtractedCitation = apps.get_model("peachjam", "ExtractedCitation")
        CitationLink = apps.get_model("peachjam", "CitationLink")

        update_extracted_citations(
            work_obj=work,
            work_model=Work,
            extracted_citation_model=ExtractedCitation,
            citation_link_model=CitationLink,
        )


class Migration(migrations.Migration):
    dependencies = [
        ("peachjam", "0050_extractedcitation"),
    ]

    operations = [
        migrations.RunPython(backfill_extracted_citations, migrations.RunPython.noop),
    ]
