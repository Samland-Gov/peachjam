#!/usr/bin/env node

// Usage: pdfjs-to-text infile.pdf outfile.txt
//
// Extract text from infile.pdf and output it into outfile.txt. Output pages are separated with the
// form-feed character (^L). This is done in a way that is compatible with the DOM text nodes that are created
// by mozilla's pdfjs.

const fs = require("fs");
// use a relative import so that we pull in the pdf.js that is incorporated into the build, rather than relying
// which consumers of peachjam may not have used
const pdfjsLib = require("pdfjs-dist/legacy/build/pdf.js");

async function getText(data) {
  // lead the pdf
  const loadingTask = pdfjsLib.getDocument({
    data,
    fontExtraProperties: true
  });
  const doc = await loadingTask.promise;
  const numPages = doc.numPages;
  let pages = [];

  // gather the text for peach page
  for (let pageNum = 1; pageNum <= numPages; pageNum++) {
    let pageText = "";
    try {
      const page = await doc.getPage(pageNum);
      const textContent = await page.getTextContent();
      pageText = textContent.items.map(x => x.str.length === 0 ? '\n' : x.str).join('');
    } catch (e) {
      console.warn(`Error on page ${pageNum}:`, e);
    }
    // convert empty strings to newlines
    pages.push(pageText);
  }

  return pages;
}

(async () => {
  const infile = process.argv[2];
  const outfile = process.argv[3];
  const data = new Uint8Array(fs.readFileSync(infile));

  const pages = await getText(data);

  // write pages separated with ^L (form-feed)
  fs.writeFileSync(outfile, pages.join("\x0C"));
})();
